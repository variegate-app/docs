package sort

/*
Для реализации алгоритма Timsort в языке программирования Go, можно воспользоваться пакетом timsort,
который является реализацией алгоритма сортировки Tim Peters’а.
Этот пакет предоставляет быструю стабильную сортировку,
которая часто оказывается в 2-3 раза быстрее стандартной сортировки в Go.
*/

/*
TimSort

TimSort — это алгоритм сортировки, который был разработан в 2002 году Tim Peters’ом.
Этот алгоритм является комбинацией алгоритмов сортировки вставками и слиянием.

Применение: Обработка данных с известными упорядоченными диапазонами.
Timsort особенно эффективен, когда данные содержат упорядоченные подмассивы, что часто встречается в реальных данных.
Оптимизация сортировки в различных приложениях: Используется в аналитике данных, обработке изображений и сигналов,
а также в образовательных целях для объяснения концепций сортировки.

Шаги:
  - Инициализация:
    Определить, является ли входной массив частично упорядоченным.
  - Создание подмассивов:
    Разделить массив на подмассивы, если они еще не упорядочены.
  - Сортировка подмассивов:
    Использовать сортировку вставками для небольших подмассивов.
  - Слияние подмассивов:
    Применить сортировку слиянием для объединения упорядоченных подмассивов.
*/
func TimSort(numbers []int) []int {
	n := len(numbers)
	if n < 2 {
		return numbers
	}

	// Инициализация подмассивов
	subarrays := make([][]int, 0, n)
	for i := 0; i < n; {
		j := i + 1
		for j < n && numbers[j-1] <= numbers[j] {
			j++
		}
		subarrays = append(subarrays, numbers[i:j])
		i = j
	}

	// Сортировка подмассивов
	for _, subarray := range subarrays {
		InsertionSort(subarray)
	}

	// Слияние подмассивов
	return mergeSubarrays(subarrays...)
}

// Функция для слияния нескольких подмассивов
func mergeSubarrays(subarrays ...[]int) []int {
	if len(subarrays) == 1 {
		return subarrays[0]
	}
	result := make([]int, 0, len(subarrays[0]))
	for i := 0; i < len(subarrays); {
		merged := merge(subarrays[i], subarrays[i+1])
		result = append(result, merged...)
		i += 2
		if i >= len(subarrays) {
			break
		}
	}
	return result
}
