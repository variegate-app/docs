package sort

/*
ShellSort

Временная сложность: в лучшем случае O(n log n) в худшем O(n(log n)^2) и среднем случае.
Пространственная сложность: O(1).

Применение:
- Когда вызов стека требует дополнительных затрат
- Когда рекурсия превышает заданный предел
- Когда сортировка вставками плохо работает
- Когда близкие элементы находятся далеко друг от друга

Принцип работы: улучшает сортировки вставками путём разрешения обмена элементов,
которые находятся далеко друг от друга. Идея метода Шелла состоит в сравнении элементов,
стоящих не только рядом, но и на определённом расстоянии друг от друга.
Иными словами — это сортировка вставками с предварительными «грубыми» проходами.

Шаги:
- Выбирается последовательность значений промежутков (обычно (N/2, N/4, ..., 1), где N — длина массива).
- Для каждого промежутка массив разбивается на подмассивы длины промежутка.
- Подмассивы сортируются независимо с помощью алгоритма вставки сортировки.
- Процесс повторяется с меньшим значением промежутка, пока он не станет 1, после чего массив сортируется с помощью обычной вставки сортировки.
*/
func ShellSort(arr []int) {
	n := len(arr)
	gap := n / 2
	for gap > 0 {
		for i := gap; i < n; i++ {
			temp := arr[i]
			j := i
			// Сдвигаем элементы, которые больше temp, на позиции промежутка вправо
			for j >= gap && arr[j-gap] > temp {
				arr[j] = arr[j-gap]
				j -= gap
			}
			// Вставляем temp в правильное положение
			arr[j] = temp
		}
		// Уменьшаем промежуток
		gap /= 2
	}
}
