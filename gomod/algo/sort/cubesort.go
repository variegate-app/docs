package sort

import "sort"

/*
Cubesort
Параллельный алгоритм сортировки, который строит самобалансирующийся многомерный массив из сортируемых ключей.
Так как оси имеют похожую длину, структура напоминает куб. После вставки каждого ключа куб можно быстро преобразовать в массив.
Является довольно специфическим и не так широко известен, как другие алгоритмы сортировки.
Этот метод сортировки использует трехмерные кубы для визуализации и сортировки данных.

Применение:
Cube Sort особенно полезен для задач, где данные можно представить в виде трехмерных координат и отсортировать по этим координатам.

Шаги:
- Массив делят на небольшие кубы размера N (обычно 8 или 16).
- сортируют каждый куб с помощью внутреннего алгоритма сортировки, например вставки или быстрой сортировки.
- После сортировки кубов их сливают вместе с помощью алгоритма слияния.
	В результате получается отсортированный в восходящем порядке массив.
*/

// Структура для хранения координат куба
type Cube struct {
	x, y, z int
}

// Функция для сравнения двух кубов
func (c Cube) Less(other Cube) bool {
	if c.x < other.x {
		return true
	} else if c.x > other.x {
		return false
	}
	if c.y < other.y {
		return true
	} else if c.y > other.y {
		return false
	}
	return c.z < other.z
}

// Функция для сортировки массива кубов
func Cubesort(cubes []Cube) {
	// Сортировка с использованием встроенной функции сортировки
	sort.Slice(cubes, func(i, j int) bool { return cubes[i].Less(cubes[j]) })
}
