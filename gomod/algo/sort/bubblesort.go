package sort

/*
BubbleSort

Временная сложность: O(n^2) в худшем и среднем случаях. В лучшем случае (если массив уже отсортирован) — O(n).
Пространственная сложность: O(1), так как сортировка происходит на месте (без использования дополнительной памяти).

Преимущество: Простой в реализации.
Недостаток: Низкая производительность для больших массивов.

Принцип работы: Aлгоритм работает путем многократного прохода по массиву и сравнения соседних элементов. Если два элемента расположены в неправильном порядке, они меняются местами. Процесс повторяется до тех пор, пока массив не окажется отсортированным.
Шаги:
- Сравниваем два соседних элемента.
- Если они находятся в неправильном порядке (например, первый больше второго), меняем их местами.
- Повторяем шаги 1 и 2 до конца массива.
- Повторяем весь процесс несколько раз, пока не произойдут больше ни одной перестановки.
*/
func BubbleSort(numbers []int) {
	n := len(numbers)
	for i := 0; i < n; i++ {
		swapped := false
		for j := 0; j < n-i-1; j++ {
			if numbers[j] > numbers[j+1] {
				numbers[j], numbers[j+1] = numbers[j+1], numbers[j]
				swapped = true
			}
		}
		if !swapped {
			break
		}
	}
}
